@using IID.BusinessLayer.Helpers;
@using IID.BusinessLayer.Identity;
@using admin = IID.BusinessLayer.Globalization.Admin.Resource;
@using login = IID.BusinessLayer.Globalization.Login.Resource;
@using common = IID.BusinessLayer.Globalization.Common.Resource;
@{
    bool isOffline = ViewBag.IsOffline ?? false;
    string homePage = isOffline ? "/Offline/Home" : "/";
}
<!DOCTYPE html>
<html @Html.Raw(isOffline ? "manifest=\"/Manifest\"" : "")>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>@ViewBag.Title</title>

    <link href="/Content/wijmo.css" rel="stylesheet" />
    <link href="/Content/breadcrumbs.css" rel="stylesheet" />
    <link href="/Content/bootstrap.css" rel="stylesheet" />
    <link href="/Content/iid.css" rel="stylesheet" />
    <link href="/Content/navigation.css" rel="stylesheet" />
    <link href="/Content/treeview.css" rel="stylesheet" />

    <script src="/Scripts/jquery-1.10.2.js"></script>
    <script src="/Scripts/jquery.validate.js"></script>
    <script src="/Scripts/jquery.validate.min.js"></script>
    <script src="/Scripts/jquery.validate.unobtrusive.js"></script>
    <script src="/Scripts/expressive.annotations.validate.js"></script>
    <script src="/Scripts/bootstrap.js"></script>
    <script src="/Scripts/respond.js"></script>
    <script src="/Scripts/modernizr-2.6.2.js"></script>
    <script src="/Scripts/jquery.are-you-sure.js"></script>
    <script src="/Scripts/ays-beforeunload-shim.js"></script>
    <script src="/Scripts/iid.js"></script>
    <script src="/Scripts/navigation.js"></script>
    <script src="/Scripts/webapiclient.min.js"></script>
    <script src="/Scripts/dateFormat.js"></script>
    <script type="text/javascript">
        var isOffline = @isOffline.ToString().ToLower();
        function confirmSyncChanges() {
            if (confirm('Are you sure you want to continue to Connected Mode? All recent changes will be imported to the Improvement Indicator Database.'))
                window.location.href = '/Offline/OnlineSync#sync=yes';
            return false;
        }
    </script>

    @if (isOffline)
    {
        <link href="/Content/wijmo-offline.css" rel="stylesheet" />
        <script src="/Scripts/wijmo-offline.js" type="text/javascript"></script>
        <script src="/Scripts/offline.js" type="text/javascript"></script>
    }
    else
    {
        @Html.C1().Resources("default")
    }

    @RenderSection("scripts", required: false)
</head>
<body>
    <header>
        <div style="@(Settings.Environment == "UAT" ? "opacity: 0.5;" : null)">
           <div class="float-left">
                <img id="banner" src="/Images/banner.jpg" alt="banner" title="ASSIST & USAID" />
            </div>
            <div class="color-dark-blue float-right text-align-right" style="padding-right: 20px;">
                <h3>
                    Improvement Indicator Database
                    <!-- @Settings.Environment / @Settings.DatabaseName -->
                </h3>
                @if (Identity.CurrentUser != null)
                {
                    <h5><i>@Identity.CurrentUser.UserName</i></h5>
                }
            </div>
            <div class="clear-floats"></div>
        </div>
        <div id="navigation">
            <div class="float-left">
                @if (Request.IsAuthenticated)
                {
                <div class="menuItem">
                    <a href="@homePage">@common.Home</a>
                </div>
                <div class="menuItem">
                    @(Html.C1().Menu()
                        .DropDownCssClass("navDropDown")
                        .Header(common.Search)
                        .IsDisabled(isOffline)
                        .MenuItems(items => items
                            .Add(i => i.Header("<a href=\"/Activity/Search\">" + common.Activities + "</a>"))
                            .Add(i => i.Header("<a href=\"/Site/Search\">" + common.Sites + "</a>"))
                        )
                    )
                </div>
                // Country Director - Request Menu
                    if (Identity.CurrentUser.IsInRole(Role.CountryDirector))
                    {
                        <div class="menuItem">
                            @(Html.C1().Menu()
                        .DropDownCssClass("navDropDown")
                        .Header(common.Requests)
                        .IsDisabled(isOffline)
                        .MenuItems(items => items
                            .Add(i => i.Header("<a href=\"/Activity/Add\">" + admin.AddActivity + "</a>"))
                            .Add(i => i.Header("<a href=\"/Site/Add\">" + admin.AddSite + "</a>"))
                            .Add(i => i.Header("<a href=\"/User/Add\">" + admin.AddUser + "</a>"))
                            .Add(i => i.IsSeparator(true))
                            .Add(i => i.Header("<a href=\"/Request/View\">" + admin.ViewRequests + "</a>"))
                        )
                            )
                        </div>
                    }
                    else
                    // Activity Leader - Request Menu
                    if (Identity.CurrentUser.IsInRole(Role.ActivityLeader))
                    {
                        <div class="menuItem">
                            @(Html.C1().Menu()
                        .DropDownCssClass("navDropDown")
                        .Header(common.Requests)
                        .IsDisabled(isOffline)
                        .MenuItems(items => items
                            .Add(i => i.Header("<a href=\"/Site/Add\">" + admin.AddSite + "</a>"))
                            .Add(i => i.Header("<a href=\"/User/Add\">" + admin.AddUser + "</a>"))
                            .Add(i => i.IsSeparator(true))
                            .Add(i => i.Header("<a href=\"/Request/View\">" + admin.ViewRequests + "</a>"))
                        )
                            )
                        </div>
                    }

                    if (Identity.CurrentUser.IsInRole(Role.SystemAdministrator))
                    {
                <div class="menuItem">
                    @(Html.C1().Menu()
                        .DropDownCssClass("navDropDown")
                        .Header(common.Administration)
                        .IsDisabled(isOffline)
                        .MenuItems(items => items
                            .Add(i => i.Header("<a href=\"/Activity/Add\">" + admin.AddActivity + "</a>"))
                            .Add(i => i.Header("<a href=\"/Site/Add\">" + admin.AddSite + "</a>"))
                            .Add(i => i.IsSeparator(true))
                            .Add(i => i.Header("<a href=\"/Request/Admin\">" + admin.ManageRequests + "</a>"))
                            .Add(i => i.IsSeparator(true))
                            .Add(i => i.Header("<a href=\"/User/Manage\">" + admin.ManageUsers + "</a>"))
                        .Add(i => i.IsSeparator(true))
                        .Add(i => i.Header("<a href=\"/FieldId/Manage/fun\">" + admin.FieldIDActivityFunder + "</a>"))
                        .Add(i => i.Header("<a href=\"/FieldId/Manage/tec\">" + admin.FieldIDActivityTechnicalArea + "</a>"))
                        .Add(i => i.Header("<a href=\"/FieldId/Manage/tas\">" + admin.FieldIDActivityTechnicalAreaSubType + "</a>"))
                        .Add(i => i.Header("<a href=\"/FieldId/Manage/igr\">" + admin.FieldIDIndicatorGroup + "</a>"))
                        .Add(i => i.Header("<a href=\"/FieldId/Manage/rpc\">" + admin.FieldIDReportClass + "</a>"))
                        .Add(i => i.Header("<a href=\"/FieldId/Manage/sam\">" + admin.FieldIDIndicatorSampling + "</a>"))
                        .Add(i => i.Header("<a href=\"/FieldId/Manage/fnt\">" + admin.FieldIDSiteFundingType + "</a>"))
                        .Add(i => i.Header("<a href=\"/FieldId/Manage/rou\">" + admin.FieldIDSitePopulationDensity + "</a>"))
                        .Add(i => i.IsSeparator(true))
                        .Add(i => i.Header("<a href=\"/Home/CountryDashboard/0\">" + admin.CountryDashboard + "</a>"))
                        .Add(i => i.Header("<a href=\"/Home/UserStatistics\">" + admin.UserStatistics + "</a>"))
                        .Add(i => i.IsSeparator(true))
                        )
                    )
                </div>
                    }
                }
                else
                {
                <div class="menuItem">@Html.ActionLink(login.Login, "Login", "Account")</div>
                }
            </div>
            <div class="float-right">
                @if (Request.IsAuthenticated)
                {
                <div class="menuItem @(isOffline ? "disconnected" : "connected")">
                    <span>&#9679;&nbsp;</span>
                    @if (isOffline)
                        {
                <a href="#" onclick="return confirmSyncChanges();">
                    @common.NetworkMode_Disconnected
                </a>
                        }
                        else
                        {
                <a href="/Offline/" onclick="return(confirm('Are you sure you want to continue to Disconnected Mode?'));">
                    @common.NetworkMode_Connected
                </a>
                        }
                </div>@*
                    <div class="menuItem">
                        <a href="@Url.Action("Notifications", "Account")">
                            @common.Notifications
                        </a>
                    </div>*@
                <div class="menuItem">
                    <a href="mailto:@Settings.AdminEmailAddress" id="contact" target="_blank">
                        @common.ContactAdministrator
                    </a>
                </div>
                }
                <div class="menuItem">
                    @(Html.C1().Menu()
                        .DropDownCssClass("navDropDown")
                        .Header(common.ChangeLanguage)
                        .IsDisabled(isOffline)
                        .MenuItems(items => items
                            .Add(i => i.Header("<div onclick=\"setCulture('en');\">English</div>"))
                            .Add(i => i.Header("<div onclick=\"setCulture('fr');\">French</div>"))
                            .Add(i => i.Header("<div onclick=\"setCulture('es');\">Spanish</div>"))
                        )
                    )
                </div>
                @if (Request.IsAuthenticated)
                {
                    <div class="menuItem">
                        <a href="@Url.Action("LogOut", "Account")" id="logout">
                            @login.Logout
                        </a>
                    </div>
                    if (isOffline)
                    {
                        <script type="text/javascript">
                            $(document).ready(function () {
                                disableButton('contact');
                                disableButton('logout');
                            });
                        </script>
                    }
                }
            </div>
        </div>
    </header>
    <div id="contentOuter" class="flexbox flex-v">
        @RenderSection("contentHeader", required: false)
        <div id="contentInner" class="flex-2">
            @* This is a hack, but we need some way to identify C1 AJAX requests so we don't create server-side errors. *@
            @if (Request.Params["wj-id"] == null)
            {
                <form id="__AjaxAntiForgeryForm" action="#" method="post">@Html.AntiForgeryToken()</form>
            }
            @RenderBody()
        </div>
    </div>
    <footer class="cursor-pointer" onclick="wijmo.Control.getControl('#footnoteModal').show();">
        &copy; @DateTime.Now.Year - @common.CopyrightText1  IIDUSAID Version 19.2

        <div class="width-75p" id="footnoteModal">
            <div class="modal-header">
                @common.Copyright
                <button type="button" tabindex="-1" class="close wj-hide">×</button>
            </div>
            <div class="modal-body">
                @common.CopyrightText1<br />
                <br />

                @common.CopyrightText2
            </div>
        </div>
        @(Html.C1().Popup("#footnoteModal").Modal(true).HideTrigger(PopupTrigger.Click))
    </footer>
</body>
</html>